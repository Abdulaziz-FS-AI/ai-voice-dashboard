name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if no changes'
        required: false
        default: 'false'

env:
  AWS_REGION: us-east-1
  ENVIRONMENT: production
  NODE_VERSION: '18'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run type checking
        run: npm run type-check

      - name: Run tests
        run: npm test -- --coverage --watchAll=false

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run security audit
        run: npm audit --audit-level=high

      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        env:
          REACT_APP_ENV: production
          REACT_APP_API_URL: https://api.voicematrix.ai
          REACT_APP_COGNITO_REGION: ${{ env.AWS_REGION }}
          REACT_APP_COGNITO_USER_POOL_ID: ${{ secrets.COGNITO_USER_POOL_ID }}
          REACT_APP_COGNITO_CLIENT_ID: ${{ secrets.COGNITO_CLIENT_ID }}
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: build/
          retention-days: 30

  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy main infrastructure
        run: |
          aws cloudformation deploy \
            --template-file aws-infrastructure/cloudformation-template.yaml \
            --stack-name voice-matrix-${{ env.ENVIRONMENT }}-infrastructure \
            --parameter-overrides \
                Environment=${{ env.ENVIRONMENT }} \
                DomainName=voicematrix.ai \
            --capabilities CAPABILITY_NAMED_IAM \
            --region ${{ env.AWS_REGION }}

      - name: Deploy Cognito
        run: |
          aws cloudformation deploy \
            --template-file aws-infrastructure/cognito-template.yaml \
            --stack-name voice-matrix-${{ env.ENVIRONMENT }}-cognito \
            --parameter-overrides \
                Environment=${{ env.ENVIRONMENT }} \
                DomainName=voicematrix.ai \
            --capabilities CAPABILITY_NAMED_IAM \
            --region ${{ env.AWS_REGION }}

      - name: Deploy SSL and Domain
        run: |
          aws cloudformation deploy \
            --template-file aws-infrastructure/domain-ssl-template.yaml \
            --stack-name voice-matrix-${{ env.ENVIRONMENT }}-domain \
            --parameter-overrides \
                Environment=${{ env.ENVIRONMENT }} \
                DomainName=voicematrix.ai \
                HostedZoneId=${{ secrets.ROUTE53_HOSTED_ZONE_ID }} \
            --capabilities CAPABILITY_NAMED_IAM \
            --region ${{ env.AWS_REGION }}

      - name: Deploy Monitoring
        run: |
          aws cloudformation deploy \
            --template-file aws-infrastructure/monitoring-template.yaml \
            --stack-name voice-matrix-${{ env.ENVIRONMENT }}-monitoring \
            --parameter-overrides \
                Environment=${{ env.ENVIRONMENT }} \
                AlertEmail=${{ secrets.ALERT_EMAIL }} \
            --capabilities CAPABILITY_NAMED_IAM \
            --region ${{ env.AWS_REGION }}

  deploy-backend:
    name: Deploy Backend
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install serverless framework
        run: npm install -g serverless

      - name: Deploy Lambda functions
        working-directory: aws-infrastructure/backend-lambda
        run: |
          npm ci
          npm run build
          serverless deploy --stage ${{ env.ENVIRONMENT }}

  deploy-frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    needs: [deploy-backend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: build/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get infrastructure outputs
        id: infra-outputs
        run: |
          BUCKET_NAME=$(aws cloudformation describe-stacks \
            --stack-name voice-matrix-${{ env.ENVIRONMENT }}-infrastructure \
            --region ${{ env.AWS_REGION }} \
            --query "Stacks[0].Outputs[?OutputKey=='FrontendBucketName'].OutputValue" \
            --output text)
          
          CLOUDFRONT_ID=$(aws cloudformation describe-stacks \
            --stack-name voice-matrix-${{ env.ENVIRONMENT }}-infrastructure \
            --region ${{ env.AWS_REGION }} \
            --query "Stacks[0].Outputs[?OutputKey=='CloudFrontDistributionId'].OutputValue" \
            --output text)
          
          echo "bucket-name=$BUCKET_NAME" >> $GITHUB_OUTPUT
          echo "cloudfront-id=$CLOUDFRONT_ID" >> $GITHUB_OUTPUT

      - name: Sync to S3
        run: |
          # Upload static assets with long cache
          aws s3 sync build/ s3://${{ steps.infra-outputs.outputs.bucket-name }}/ \
            --delete \
            --cache-control "public,max-age=31536000,immutable" \
            --exclude "*.html" \
            --exclude "service-worker.js" \
            --exclude "manifest.json"
          
          # Upload HTML files with no cache
          aws s3 sync build/ s3://${{ steps.infra-outputs.outputs.bucket-name }}/ \
            --delete \
            --cache-control "public,max-age=0,must-revalidate" \
            --include "*.html" \
            --include "service-worker.js" \
            --include "manifest.json"

      - name: Invalidate CloudFront
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ steps.infra-outputs.outputs.cloudfront-id }} \
            --paths "/*"

  smoke-tests:
    name: Smoke Tests
    runs-on: ubuntu-latest
    needs: [deploy-frontend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Wait for deployment
        run: sleep 60

      - name: Run smoke tests
        env:
          BASE_URL: https://voicematrix.ai
          API_URL: https://api.voicematrix.ai
        run: |
          # Test main site
          curl -f $BASE_URL || exit 1
          
          # Test API health
          curl -f $API_URL/health || exit 1
          
          echo "âœ… Smoke tests passed"

  notify:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [smoke-tests]
    if: always()
    steps:
      - name: Notify success
        if: needs.smoke-tests.result == 'success'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [smoke-tests]
    if: failure()
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Trigger rollback
        run: |
          echo "ðŸ”„ Triggering rollback procedure..."
          # This would trigger your rollback process
          # For now, we'll just notify
          echo "Rollback would be triggered here in a real scenario"